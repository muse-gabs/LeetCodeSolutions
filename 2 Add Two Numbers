/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //You are given two non-empty linked lists representing two non-negative integers. 
 //The digits are stored in reverse order and each of their nodes contain a single digit. 
 //Add the two numbers and return it as a linked list.

 //You may assume the two numbers do not contain any leading zero, except the number 0 itself.
 
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode temp = l1;
        ListNode temp2 = l2;
        ListNode temp3 = new ListNode(0);
        ListNode solution = temp3;
        int storedNum = 0;
        //adds the values of the two lists until the last node 
        //in which both lists will have null
        while (l1.next != null && l2.next != null) {
            
            int sum = l1.val + l2.val + storedNum;
            if (sum < 10) {
                solution.val = sum;
                storedNum = 0;
            } else {
                storedNum = sum / 10;
                solution.val = sum % 10;
            }
            
            solution.next = new ListNode(0);
            solution = solution.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        //takes care of carrying over the last digit
        int total = l1.val + l2.val + storedNum;
        if (total >= 10) {
            solution.val = total % 10;
            storedNum = total / 10;
        } else {
            solution.val = total;
            storedNum = 0;
        }
        l1 = l1.next;
        l2 = l2.next;
        
        //takes care of when one list is longer than the other
        while (l1 != null) {
            solution.next = new ListNode(0);
            solution = solution.next;
            solution.val = (l1.val + storedNum) % 10;
            storedNum = (l1.val + storedNum) / 10;
            l1 = l1.next;
        }
        
        while (l2 != null) {
            solution.next = new ListNode(0);
            solution = solution.next;
            solution.val = (l2.val + storedNum) % 10;
            storedNum = (l2.val + storedNum) / 10;
            l2 = l2.next;
        }
        
        //takes care of carrying over the last digit
        if (storedNum != 0) {
            solution.next = new ListNode(0);
            solution = solution.next;
            solution.val = storedNum;
            storedNum = 0;
        }
        
        return temp3;
    }
}
