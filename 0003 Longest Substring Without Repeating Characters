/* 
Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int totalLengthofString = s.length();
        Set<Character> storeStrings = new HashSet<>();
        int answer = 0, i = 0, j = 0;
        while (i < totalLengthofString && j < totalLengthofString) {
            if (!storeStrings.contains(s.charAt(j))) {
                storeStrings.add(s.charAt(j++));
                answer = Math.max(answer, j - i);
            } else {
                storeStrings.remove(s.charAt(i++));
            }
        }
        return answer;
    }
}
