/* 
This solution was Runtime: 3 ms, faster than 100.00% of Java online submissions for Flipping an Image.
Memory Usage: 38.4 MB, less than 56.00% of Java online submissions for Flipping an Image.

Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.

To flip an image horizontally means that each row of the image is reversed.  For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].

To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0].

Example 1:

Input: [[1,1,0],[1,0,1],[0,0,0]]
Output: [[1,0,0],[0,1,0],[1,1,1]]
Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].
Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]
Example 2:

Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].
Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
Notes:

1 <= A.length = A[0].length <= 20
0 <= A[i][j] <= 1
*/

class Solution {
    public int[][] flipAndInvertImage(int[][] A) {
        
        // go through each row
        for (int i = 0; i < A.length; i++) {
            // check whether the row has an odd number or an even number
            if (A[i].length % 2 == 0) {
                // for even number store the ending and beginning digit
                for (int j = 0; j < A[i].length/2; j++) {
                    int digit = A[i][j];
                    int enddigit = A[i][A[i].length - 1 - j];
                    // check if the beginning digit is a 0 or 1
                    // place the opposite value in the ending spot
                    if (digit == 0) {
                        A[i][A[i].length - 1 - j] = 1;
                    } else {
                        A[i][A[i].length - 1 - j] = 0;
                    } 
                    
                    // check if the ending digit is a 0 or 1
                    // place the opposite value in the beginning spot
                    if (enddigit == 0) {
                        A[i][j] = 1;
                    } else {
                        A[i][j] = 0;
                    }                    
                }
            } else {
                // do the same procedure as though it were an even number
                for (int j = 0; j < A[i].length/2; j++) {
                    int digit = A[i][j];
                    int enddigit = A[i][A[i].length - 1 - j];
                    if (digit == 0) {
                        A[i][A[i].length - 1 - j] = 1;
                    } else {
                        A[i][A[i].length - 1 - j] = 0;
                    } 
                    
                    if (enddigit == 0) {
                        A[i][j] = 1;
                    } else {
                        A[i][j] = 0;
                    }                    
                }
                
                // this is to invert the number in the middle that doesn't get swapped
                int digit = A[i][A[i].length/2];
                if (digit == 0) {
                    A[i][A[i].length/2] = 1;
                } else {
                    A[i][A[i].length/2] = 0;
                }
            }
        }
        
        return A;
    }
}
